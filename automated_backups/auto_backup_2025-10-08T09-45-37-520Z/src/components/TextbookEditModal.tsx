import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Grid,
  Typography,
  Box,
  Chip,
  IconButton,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Paper,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction,
  Divider,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material';
import {
  Close as CloseIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  ExpandMore as ExpandMoreIcon,
  AutoMode as AutoIcon,
  Edit as ManualIcon
} from '@mui/icons-material';
import { TextbookEntry, CompletedStage } from '../types/textbookTypes';

interface TextbookEditModalProps {
  open: boolean;
  entry: TextbookEntry | null;
  onClose: () => void;
  onSave: (entry: TextbookEntry) => void;
  sections: Array<{ id: string; name: string }>;
}

const TextbookEditModal: React.FC<TextbookEditModalProps> = ({
  open,
  entry,
  onClose,
  onSave,
  sections = []
}) => {
  const [formData, setFormData] = useState<Partial<TextbookEntry>>({});
  const [completedStages, setCompletedStages] = useState<CompletedStage[]>([]);
  const [newStage, setNewStage] = useState<Partial<CompletedStage>>({});
  const [editingStageIndex, setEditingStageIndex] = useState<number | null>(null);
  const [expandedAccordion, setExpandedAccordion] = useState<string | false>('basic');

  // تهيئة البيانات عند فتح المودال
  useEffect(() => {
    if (entry) {
      setFormData({ ...entry });
      setCompletedStages(entry.completedStages || []);
    } else {
      // إنشاء سجل جديد
      const defaultData: Partial<TextbookEntry> = {
        id: Date.now().toString(),
        date: new Date().toISOString().split('T')[0],
        startTime: '08:00',
        duration: 1,
        sectionId: '',
        sectionName: '',
        lessonTitle: '',
        sessionNumber: 1,
        lessonContent: '',
        teacherSignature: 'بشيري نبيل',
        notes: '',
        isAutoGenerated: false,
        completedStages: []
      };
      setFormData(defaultData);
      setCompletedStages([]);
    }
    setNewStage({});
    setEditingStageIndex(null);
    setExpandedAccordion('basic');
  }, [entry, open]);

  // تحديث اسم القسم عند تغيير معرف القسم
  useEffect(() => {
    if (formData.sectionId) {
      const section = sections.find(s => s.id === formData.sectionId);
      if (section) {
        setFormData(prev => ({
          ...prev,
          sectionName: section.name
        }));
      }
    }
  }, [formData.sectionId, sections]);

  const handleFormChange = (field: keyof TextbookEntry, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAddStage = () => {
    if (!newStage.title || !newStage.content) {
      return;
    }

    const stage: CompletedStage = {
      id: Date.now().toString(),
      title: newStage.title,
      content: newStage.content,
      duration: newStage.duration || 10,
      completed: true,
      notes: newStage.notes || ''
    };

    setCompletedStages(prev => [...prev, stage]);
    setNewStage({});
  };

  const handleEditStage = (index: number) => {
    setEditingStageIndex(index);
    setNewStage({ ...completedStages[index] });
  };

  const handleUpdateStage = () => {
    if (editingStageIndex === null || !newStage.title || !newStage.content) {
      return;
    }

    const updatedStage: CompletedStage = {
      id: completedStages[editingStageIndex].id,
      title: newStage.title!,
      content: newStage.content!,
      duration: newStage.duration || 10,
      completed: true,
      notes: newStage.notes || ''
    };

    setCompletedStages(prev => 
      prev.map((stage, index) => 
        index === editingStageIndex ? updatedStage : stage
      )
    );
    setEditingStageIndex(null);
    setNewStage({});
  };

  const handleDeleteStage = (index: number) => {
    setCompletedStages(prev => prev.filter((_, i) => i !== index));
  };

  const handleCancelEdit = () => {
    setEditingStageIndex(null);
    setNewStage({});
  };

  const handleSave = () => {
    // التحقق من الحقول المطلوبة
    if (!formData.sectionId || !formData.lessonTitle || !formData.lessonContent) {
      return;
    }

    // إنشاء محتوى الدرس الكامل من المراحل
    let fullLessonContent = formData.lessonContent || '';
    if (completedStages.length > 0) {
      const stagesContent = completedStages.map((stage, index) => 
        `${index + 1}. ${stage.title}: ${stage.content}`
      ).join('\n');
      fullLessonContent = `${formData.lessonContent}\n\nالمراحل المُنجزة:\n${stagesContent}`;
    }

    const entryToSave: TextbookEntry = {
      ...formData as TextbookEntry,
      completedStages,
      lessonContent: fullLessonContent,
      isAutoGenerated: entry?.isAutoGenerated || false
    };

    onSave(entryToSave);
    onClose();
  };

  const handleAccordionChange = (panel: string) => (
    event: React.SyntheticEvent,
    isExpanded: boolean
  ) => {
    setExpandedAccordion(isExpanded ? panel : false);
  };

  return (
    <Dialog 
      open={open} 
      onClose={onClose} 
      maxWidth="lg" 
      fullWidth
      PaperProps={{
        sx: { minHeight: '80vh' }
      }}
    >
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6">
            {entry ? 'تعديل سجل دفتر النصوص' : 'إضافة سجل جديد لدفتر النصوص'}
          </Typography>
          
          <Box display="flex" alignItems="center" gap={1}>
            {entry?.isAutoGenerated && (
              <Chip
                icon={<AutoIcon />}
                label="مولد تلقائياً"
                color="primary"
                size="small"
              />
            )}
            {entry && !entry.isAutoGenerated && (
              <Chip
                icon={<ManualIcon />}
                label="يدوي"
                color="secondary"
                size="small"
              />
            )}
            <IconButton onClick={onClose}>
              <CloseIcon />
            </IconButton>
          </Box>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box sx={{ mt: 2 }}>
          {/* معلومات أساسية */}
          <Accordion 
            expanded={expandedAccordion === 'basic'} 
            onChange={handleAccordionChange('basic')}
          >
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography variant="h6">المعلومات الأساسية</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Grid container spacing={3}>
                {/* التاريخ والوقت */}
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="التاريخ"
                    type="date"
                    value={formData.date || ''}
                    onChange={(e) => handleFormChange('date', e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    required
                  />
                </Grid>
                
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="وقت البداية"
                    type="time"
                    value={formData.startTime || ''}
                    onChange={(e) => handleFormChange('startTime', e.target.value)}
                    InputLabelProps={{ shrink: true }}
                    required
                  />
                </Grid>

                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="المدة (بالساعات)"
                    type="number"
                    value={formData.duration || 1}
                    onChange={(e) => handleFormChange('duration', parseFloat(e.target.value))}
                    inputProps={{ min: 0.5, max: 4, step: 0.5 }}
                    required
                  />
                </Grid>

                {/* القسم */}
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth required>
                    <InputLabel>القسم</InputLabel>
                    <Select
                      value={formData.sectionId || ''}
                      onChange={(e) => handleFormChange('sectionId', e.target.value)}
                      label="القسم"
                    >
                      {sections.map((section) => (
                        <MenuItem key={section.id} value={section.id}>
                          {section.name}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>

                {/* عنوان الدرس */}
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="عنوان الدرس"
                    value={formData.lessonTitle || ''}
                    onChange={(e) => handleFormChange('lessonTitle', e.target.value)}
                    required
                  />
                </Grid>

                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="رقم الحصة"
                    type="number"
                    value={formData.sessionNumber || 1}
                    onChange={(e) => handleFormChange('sessionNumber', parseInt(e.target.value))}
                    inputProps={{ min: 1 }}
                  />
                </Grid>

                {/* محتوى الدرس */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="محتوى الدرس"
                    multiline
                    rows={4}
                    value={formData.lessonContent || ''}
                    onChange={(e) => handleFormChange('lessonContent', e.target.value)}
                    required
                  />
                </Grid>

                {/* التوقيع والملاحظات */}
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="توقيع الأستاذ"
                    value={formData.teacherSignature || ''}
                    onChange={(e) => handleFormChange('teacherSignature', e.target.value)}
                  />
                </Grid>

                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="ملاحظات"
                    multiline
                    rows={2}
                    value={formData.notes || ''}
                    onChange={(e) => handleFormChange('notes', e.target.value)}
                  />
                </Grid>
              </Grid>
            </AccordionDetails>
          </Accordion>

          {/* مراحل الدرس */}
          <Accordion 
            expanded={expandedAccordion === 'stages'} 
            onChange={handleAccordionChange('stages')}
            sx={{ mt: 2 }}
          >
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography variant="h6">
                مراحل الدرس ({completedStages.length})
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Box>
                {/* قائمة المراحل الموجودة */}
                {completedStages.length > 0 && (
                  <Paper elevation={1} sx={{ mb: 3 }}>
                    <List>
                      {completedStages.map((stage, index) => (
                        <React.Fragment key={stage.id}>
                          <ListItem>
                            <ListItemText
                              primary={stage.title}
                              secondary={
                                <Box>
                                  <Typography variant="body2" color="text.secondary">
                                    {stage.content}
                                  </Typography>
                                  <Typography variant="caption" color="text.secondary">
                                    المدة: {stage.duration} دقيقة
                                  </Typography>
                                  {stage.notes && (
                                    <Typography variant="caption" display="block" color="text.secondary">
                                      ملاحظة: {stage.notes}
                                    </Typography>
                                  )}
                                </Box>
                              }
                            />
                            <ListItemSecondaryAction>
                              <IconButton 
                                edge="end" 
                                onClick={() => handleEditStage(index)}
                                sx={{ mr: 1 }}
                              >
                                <EditIcon />
                              </IconButton>
                              <IconButton 
                                edge="end" 
                                onClick={() => handleDeleteStage(index)}
                                color="error"
                              >
                                <DeleteIcon />
                              </IconButton>
                            </ListItemSecondaryAction>
                          </ListItem>
                          {index < completedStages.length - 1 && <Divider />}
                        </React.Fragment>
                      ))}
                    </List>
                  </Paper>
                )}

                {/* محرر المراحل */}
                <Paper elevation={2} sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    {editingStageIndex !== null ? 'تعديل المرحلة' : 'إضافة مرحلة جديدة'}
                  </Typography>
                  
                  <Grid container spacing={2}>
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="عنوان المرحلة"
                        value={newStage.title || ''}
                        onChange={(e) => setNewStage(prev => ({ ...prev, title: e.target.value }))}
                      />
                    </Grid>
                    
                    <Grid item xs={12} sm={6}>
                      <TextField
                        fullWidth
                        label="المدة (بالدقائق)"
                        type="number"
                        value={newStage.duration || 10}
                        onChange={(e) => setNewStage(prev => ({ 
                          ...prev, 
                          duration: parseInt(e.target.value) 
                        }))}
                        inputProps={{ min: 1, max: 60 }}
                      />
                    </Grid>
                    
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        label="محتوى المرحلة"
                        multiline
                        rows={3}
                        value={newStage.content || ''}
                        onChange={(e) => setNewStage(prev => ({ ...prev, content: e.target.value }))}
                      />
                    </Grid>
                    
                    <Grid item xs={12}>
                      <TextField
                        fullWidth
                        label="ملاحظات (اختيارية)"
                        value={newStage.notes || ''}
                        onChange={(e) => setNewStage(prev => ({ ...prev, notes: e.target.value }))}
                      />
                    </Grid>
                    
                    <Grid item xs={12}>
                      <Box display="flex" gap={2}>
                        {editingStageIndex !== null ? (
                          <>
                            <Button
                              variant="contained"
                              color="primary"
                              startIcon={<SaveIcon />}
                              onClick={handleUpdateStage}
                              disabled={!newStage.title || !newStage.content}
                            >
                              حفظ التعديل
                            </Button>
                            <Button
                              variant="outlined"
                              startIcon={<CancelIcon />}
                              onClick={handleCancelEdit}
                            >
                              إلغاء
                            </Button>
                          </>
                        ) : (
                          <Button
                            variant="contained"
                            color="primary"
                            startIcon={<AddIcon />}
                            onClick={handleAddStage}
                            disabled={!newStage.title || !newStage.content}
                          >
                            إضافة المرحلة
                          </Button>
                        )}
                      </Box>
                    </Grid>
                  </Grid>
                </Paper>
              </Box>
            </AccordionDetails>
          </Accordion>

          {/* تحذيرات ومعلومات إضافية */}
          {entry?.isAutoGenerated && (
            <Alert severity="info" sx={{ mt: 2 }}>
              هذا السجل تم توليده تلقائياً من الحصص المكتملة. يمكنك تعديله ولكن ستفقد رابط التوليد التلقائي.
            </Alert>
          )}
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 3 }}>
        <Button onClick={onClose} color="inherit">
          إلغاء
        </Button>
        <Button 
          onClick={handleSave} 
          variant="contained" 
          color="primary"
          disabled={!formData.sectionId || !formData.lessonTitle || !formData.lessonContent}
        >
          حفظ
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default TextbookEditModal;