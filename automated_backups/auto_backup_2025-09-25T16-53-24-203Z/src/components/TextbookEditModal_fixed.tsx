import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  Grid,
  Typography,
  Box,
  Chip,
  Alert,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Divider,
  IconButton,
  List,
  ListItem,
  ListItemText,
  ListItemSecondaryAction
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  AutoAwesome as AutoIcon
} from '@mui/icons-material';

import { TextbookEntry, CompletedStage } from '../types/textbookTypes';
import { Section } from '../contexts/SectionsContext';

interface TextbookEditModalProps {
  open: boolean;
  onClose: () => void;
  entry: TextbookEntry | null;
  sections: Section[];
  onSave: (entry: TextbookEntry) => Promise<void>;
  isNew?: boolean;
}

const TextbookEditModal: React.FC<TextbookEditModalProps> = ({
  open,
  onClose,
  entry,
  sections,
  onSave,
  isNew = false
}) => {
  // State for form data
  const [formData, setFormData] = useState<Partial<TextbookEntry>>({
    sectionId: '',
    sectionName: '',
    date: '',
    subject: '',
    teacher: '',
    classroom: '',
    sessionNumber: 1,
    lessonTitle: '',
    lessonContent: '',
    completedStages: [],
    completionRate: 0,
    notes: '',
    homework: '',
    evaluations: '',
    isAutoGenerated: false,
    isManuallyEdited: false
  });

  // State for editing stages
  const [editingStage, setEditingStage] = useState<CompletedStage | null>(null);
  const [newStage, setNewStage] = useState<Partial<CompletedStage>>({
    title: '',
    description: '',
    duration: 0,
    type: 'content',
    isCore: false,
    order: 1
  });

  // UI state
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showStageEditor, setShowStageEditor] = useState(false);

  // Initialize form data when entry changes
  useEffect(() => {
    if (entry) {
      setFormData({ ...entry });
    } else if (isNew) {
      // Initialize with default values for new entry
      const today = new Date().toISOString().split('T')[0];
      setFormData({
        sectionId: '',
        sectionName: '',
        date: today,
        subject: 'التربية الإسلامية',
        teacher: '',
        classroom: '',
        sessionNumber: 1,
        lessonTitle: '',
        lessonContent: '',
        completedStages: [],
        completionRate: 0,
        notes: '',
        homework: 'لا توجد واجبات',
        evaluations: 'لا توجد تقييمات',
        isAutoGenerated: false,
        isManuallyEdited: true
      });
    }
  }, [entry, isNew]);

  // Update completion rate when stages change
  useEffect(() => {
    if (formData.completedStages && formData.completedStages.length > 0) {
      // For manually edited entries, assume all stages are completed
      const completionRate = 100;
      setFormData(prev => ({ ...prev, completionRate }));
    }
  }, [formData.completedStages]);

  const handleInputChange = (field: keyof TextbookEntry, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSectionChange = (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    setFormData(prev => ({
      ...prev,
      sectionId,
      sectionName: section?.name || ''
    }));
  };

  const handleAddStage = () => {
    if (!newStage.title) {
      setError('عنوان المرحلة مطلوب');
      return;
    }

    const stage: CompletedStage = {
      id: `stage_${Date.now()}`,
      title: newStage.title!,
      description: newStage.description || '',
      duration: newStage.duration || 0,
      type: newStage.type || 'content',
      isCore: newStage.isCore || false,
      order: (formData.completedStages?.length || 0) + 1,
      completedAt: new Date().toISOString()
    };

    setFormData(prev => ({
      ...prev,
      completedStages: [...(prev.completedStages || []), stage]
    }));

    // Reset new stage form
    setNewStage({
      title: '',
      description: '',
      duration: 0,
      type: 'content',
      isCore: false,
      order: 1
    });

    setShowStageEditor(false);
    setError(null);
  };

  const handleEditStage = (stage: CompletedStage) => {
    setEditingStage(stage);
    setNewStage({ ...stage });
    setShowStageEditor(true);
  };

  const handleUpdateStage = () => {
    if (!editingStage || !newStage.title) {
      setError('عنوان المرحلة مطلوب');
      return;
    }

    const updatedStage: CompletedStage = {
      ...editingStage,
      title: newStage.title!,
      description: newStage.description || '',
      duration: newStage.duration || 0,
      type: newStage.type || 'content',
      isCore: newStage.isCore || false
    };

    setFormData(prev => ({
      ...prev,
      completedStages: prev.completedStages?.map(stage =>
        stage.id === editingStage.id ? updatedStage : stage
      ) || []
    }));

    setEditingStage(null);
    setNewStage({
      title: '',
      description: '',
      duration: 0,
      type: 'content',
      isCore: false,
      order: 1
    });
    setShowStageEditor(false);
    setError(null);
  };

  const handleDeleteStage = (stageId: string) => {
    setFormData(prev => ({
      ...prev,
      completedStages: prev.completedStages?.filter(stage => stage.id !== stageId) || []
    }));
  };

  const generateContentFromStages = () => {
    if (!formData.completedStages || formData.completedStages.length === 0) {
      return;
    }

    const content = formData.completedStages
      .map((stage, index) => {
        let stageText = `${index + 1}. ${stage.title}`;
        if (stage.description) {
          stageText += `: ${stage.description}`;
        }
        return stageText;
      })
      .join('\n');

    setFormData(prev => ({ ...prev, lessonContent: content }));
  };

  const validateForm = (): boolean => {
    if (!formData.sectionId) {
      setError('يجب اختيار القسم');
      return false;
    }
    if (!formData.date) {
      setError('التاريخ مطلوب');
      return false;
    }
    if (!formData.lessonTitle) {
      setError('عنوان الدرس مطلوب');
      return false;
    }
    if (!formData.subject) {
      setError('المادة مطلوبة');
      return false;
    }
    if (!formData.teacher) {
      setError('اسم المعلم مطلوب');
      return false;
    }

    setError(null);
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);
      setError(null);

      const entryToSave: TextbookEntry = {
        id: entry?.id || `manual_${Date.now()}`,
        sectionId: formData.sectionId!,
        sectionName: formData.sectionName!,
        date: formData.date!,
        subject: formData.subject!,
        teacher: formData.teacher!,
        classroom: formData.classroom || '',
        sessionNumber: formData.sessionNumber || 1,
        lessonTitle: formData.lessonTitle!,
        lessonContent: formData.lessonContent || '',
        completedStages: formData.completedStages || [],
        completionRate: formData.completionRate || 0,
        notes: formData.notes || '',
        homework: formData.homework || 'لا توجد واجبات',
        evaluations: formData.evaluations || 'لا توجد تقييمات',
        lessonId: formData.lessonId || null,
        isAutoGenerated: formData.isAutoGenerated || false,
        isManuallyEdited: true,
        createdAt: entry?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      await onSave(entryToSave);
      onClose();

    } catch (error: any) {
      setError(error.message || 'فشل في حفظ السجل');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({});
    setEditingStage(null);
    setNewStage({
      title: '',
      description: '',
      duration: 0,
      type: 'content',
      isCore: false,
      order: 1
    });
    setShowStageEditor(false);
    setError(null);
    onClose();
  };

  const getSectionName = (sectionId: string) => {
    const section = sections.find(s => s.id === sectionId);
    return section?.name || sectionId;
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
      <DialogTitle>
        <Box display="flex" alignItems="center" justifyContent="space-between">
          <Typography variant="h6">
            {isNew ? 'إضافة سجل جديد' : 'تحرير سجل دفتر النصوص'}
          </Typography>
          {entry?.isAutoGenerated && (
            <Chip
              icon={<AutoIcon />}
              label="مولد تلقائياً"
              color="primary"
              size="small"
            />
          )}
        </Box>
      </DialogTitle>

      <DialogContent>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
            {error}
          </Alert>
        )}

        <Grid container spacing={2}>
          {/* معلومات أساسية */}
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>المعلومات الأساسية</Typography>
          </Grid>

          <Grid item xs={12} sm={6}>
            <FormControl fullWidth required>
              <InputLabel>القسم</InputLabel>
              <Select
                value={formData.sectionId || ''}
                onChange={(e) => handleSectionChange(e.target.value)}
                label="القسم"
              >
                {sections.map((section) => (
                  <MenuItem key={section.id} value={section.id}>
                    {section.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              required
              label="التاريخ"
              type="date"
              value={formData.date || ''}
              onChange={(e) => handleInputChange('date', e.target.value)}
              InputLabelProps={{ shrink: true }}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              required
              label="المادة"
              value={formData.subject || ''}
              onChange={(e) => handleInputChange('subject', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              required
              label="المعلم"
              value={formData.teacher || ''}
              onChange={(e) => handleInputChange('teacher', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="القاعة"
              value={formData.classroom || ''}
              onChange={(e) => handleInputChange('classroom', e.target.value)}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="رقم الجلسة"
              type="number"
              value={formData.sessionNumber || 1}
              onChange={(e) => handleInputChange('sessionNumber', parseInt(e.target.value) || 1)}
              inputProps={{ min: 1 }}
            />
          </Grid>

          <Divider sx={{ width: '100%', my: 2 }} />

          {/* محتوى الدرس */}
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>محتوى الدرس</Typography>
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              required
              label="عنوان الدرس"
              value={formData.lessonTitle || ''}
              onChange={(e) => handleInputChange('lessonTitle', e.target.value)}
            />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={4}
              label="محتوى الدرس"
              value={formData.lessonContent || ''}
              onChange={(e) => handleInputChange('lessonContent', e.target.value)}
              placeholder="وصف تفصيلي لمحتوى الدرس..."
            />
          </Grid>

          <Divider sx={{ width: '100%', my: 2 }} />

          {/* مراحل الدرس */}
          <Grid item xs={12}>
            <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
              <Typography variant="h6">مراحل الدرس</Typography>
              <Box>
                <Button
                  startIcon={<AutoIcon />}
                  onClick={generateContentFromStages}
                  size="small"
                  sx={{ mr: 1 }}
                >
                  توليد المحتوى
                </Button>
                <Button
                  startIcon={<AddIcon />}
                  onClick={() => setShowStageEditor(true)}
                  variant="outlined"
                  size="small"
                >
                  إضافة مرحلة
                </Button>
              </Box>
            </Box>

            {formData.completedStages && formData.completedStages.length > 0 ? (
              <List>
                {formData.completedStages.map((stage, index) => (
                  <ListItem key={stage.id} divider>
                    <ListItemText
                      primary={`${index + 1}. ${stage.title}`}
                      secondary={
                        <Box>
                          {stage.description && <Typography variant="body2">{stage.description}</Typography>}
                          <Box mt={1}>
                            <Chip label={stage.type} size="small" sx={{ mr: 1 }} />
                            {stage.isCore && <Chip label="أساسي" color="primary" size="small" sx={{ mr: 1 }} />}
                            {stage.duration > 0 && <Chip label={`${stage.duration} دقيقة`} size="small" />}
                          </Box>
                        </Box>
                      }
                    />
                    <ListItemSecondaryAction>
                      <IconButton
                        edge="end"
                        onClick={() => handleEditStage(stage)}
                        size="small"
                        sx={{ mr: 1 }}
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        edge="end"
                        onClick={() => handleDeleteStage(stage.id)}
                        size="small"
                        color="error"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </ListItemSecondaryAction>
                  </ListItem>
                ))}
              </List>
            ) : (
              <Alert severity="info">لا توجد مراحل مضافة للدرس</Alert>
            )}

            {/* محرر المراحل */}
            {showStageEditor && (
              <Box mt={2} p={2} border={1} borderColor="grey.300" borderRadius={1}>
                <Typography variant="subtitle1" gutterBottom>
                  {editingStage ? 'تحرير المرحلة' : 'إضافة مرحلة جديدة'}
                </Typography>
                <Grid container spacing={2}>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      label="عنوان المرحلة"
                      value={newStage.title || ''}
                      onChange={(e) => setNewStage(prev => ({ ...prev, title: e.target.value }))}
                      required
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <FormControl fullWidth>
                      <InputLabel>نوع المرحلة</InputLabel>
                      <Select
                        value={newStage.type || 'content'}
                        onChange={(e) => setNewStage(prev => ({ ...prev, type: e.target.value as any }))}
                        label="نوع المرحلة"
                      >
                        <MenuItem value="content">محتوى</MenuItem>
                        <MenuItem value="activity">نشاط</MenuItem>
                        <MenuItem value="evaluation">تقييم</MenuItem>
                        <MenuItem value="homework">واجب</MenuItem>
                        <MenuItem value="discussion">مناقشة</MenuItem>
                      </Select>
                    </FormControl>
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      multiline
                      rows={2}
                      label="وصف المرحلة"
                      value={newStage.description || ''}
                      onChange={(e) => setNewStage(prev => ({ ...prev, description: e.target.value }))}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <TextField
                      fullWidth
                      label="المدة (بالدقائق)"
                      type="number"
                      value={newStage.duration || 0}
                      onChange={(e) => setNewStage(prev => ({ ...prev, duration: parseInt(e.target.value) || 0 }))}
                      inputProps={{ min: 0 }}
                    />
                  </Grid>
                  <Grid item xs={12} sm={6}>
                    <FormControlLabel
                      control={
                        <Switch
                          checked={newStage.isCore || false}
                          onChange={(e) => setNewStage(prev => ({ ...prev, isCore: e.target.checked }))}
                        />
                      }
                      label="مرحلة أساسية"
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Box display="flex" gap={2}>
                      <Button
                        startIcon={<SaveIcon />}
                        onClick={editingStage ? handleUpdateStage : handleAddStage}
                        variant="contained"
                        size="small"
                      >
                        {editingStage ? 'حفظ التعديل' : 'إضافة المرحلة'}
                      </Button>
                      <Button
                        startIcon={<CancelIcon />}
                        onClick={() => {
                          setShowStageEditor(false);
                          setEditingStage(null);
                          setNewStage({
                            title: '',
                            description: '',
                            duration: 0,
                            type: 'content',
                            isCore: false,
                            order: 1
                          });
                        }}
                        size="small"
                      >
                        إلغاء
                      </Button>
                    </Box>
                  </Grid>
                </Grid>
              </Box>
            )}
          </Grid>

          <Divider sx={{ width: '100%', my: 2 }} />

          {/* معلومات إضافية */}
          <Grid item xs={12}>
            <Typography variant="h6" gutterBottom>معلومات إضافية</Typography>
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="الواجبات"
              value={formData.homework || ''}
              onChange={(e) => handleInputChange('homework', e.target.value)}
              placeholder="وصف الواجبات المنزلية..."
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="التقييمات"
              value={formData.evaluations || ''}
              onChange={(e) => handleInputChange('evaluations', e.target.value)}
              placeholder="وصف التقييمات والاختبارات..."
            />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={3}
              label="ملاحظات"
              value={formData.notes || ''}
              onChange={(e) => handleInputChange('notes', e.target.value)}
              placeholder="أي ملاحظات إضافية..."
            />
          </Grid>
        </Grid>
      </DialogContent>

      <DialogActions>
        <Button onClick={handleClose} disabled={loading}>
          إلغاء
        </Button>
        <Button
          onClick={handleSave}
          variant="contained"
          disabled={loading}
          startIcon={loading ? undefined : <SaveIcon />}
        >
          {loading ? 'جاري الحفظ...' : 'حفظ'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default TextbookEditModal;