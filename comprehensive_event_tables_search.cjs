const sqlite3 = require('sqlite3').verbose();

/**
 * ุงูุจุญุซ ุงูุดุงูู ุนู ุฌููุน ุฌุฏุงูู ุงูุฃุญุฏุงุซ ูู ุงููุธุงู
 * Comprehensive Search for All Event Tables in System
 */

console.log('๐ ุงูุจุญุซ ุงูุดุงูู ุนู ุฌุฏุงูู ุงูุฃุญุฏุงุซ ูู ุงููุธุงู\n');

const currentDb = new sqlite3.Database('classroom.db', sqlite3.OPEN_READONLY);
const backupDb = new sqlite3.Database('classroom_backup_20250924_174347.db', sqlite3.OPEN_READONLY);

// ุงูุจุญุซ ุนู ุฌููุน ุงูุฌุฏุงูู ุงูุชู ูุฏ ุชุญุชูู ุนูู ุฃุญุฏุงุซ
function findAllEventTables() {
    console.log('๐ ุงูุจุญุซ ุนู ุฌููุน ุงูุฌุฏุงูู ุงููุญุชููุฉ...\n');
    
    currentDb.all(`
        SELECT name, sql FROM sqlite_master 
        WHERE type='table' 
        AND name NOT LIKE 'sqlite_%'
        ORDER BY name
    `, (err, tables) => {
        if (err) {
            console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูุฌุฏุงูู:', err);
            return;
        }
        
        console.log(`๐ ุฅุฌูุงูู ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ: ${tables.length}\n`);
        
        // ูุญุต ูู ุฌุฏูู ููุจุญุซ ุนู ุงูุจูุงูุงุช ุงููุชุนููุฉ ุจุงูุฃุญุฏุงุซ
        let completed = 0;
        const eventRelatedTables = [];
        
        tables.forEach(table => {
            // ูุญุต ุงูุจูุงูุงุช ูู ูู ุฌุฏูู
            currentDb.all(`SELECT * FROM ${table.name} LIMIT 3`, (err, sampleData) => {
                completed++;
                
                if (!err && sampleData && sampleData.length > 0) {
                    const firstRecord = sampleData[0];
                    const columns = Object.keys(firstRecord);
                    
                    // ุงูุจุญุซ ุนู ุงูุฃุนูุฏุฉ ุงููุฑุชุจุทุฉ ุจุงูุฃุญุฏุงุซ/ุงูุฌุฏููุฉ
                    const eventKeywords = ['event', 'schedule', 'time', 'day', 'date', 'lesson', 'class'];
                    const hasEventColumns = columns.some(col => 
                        eventKeywords.some(keyword => col.toLowerCase().includes(keyword))
                    );
                    
                    if (hasEventColumns || table.name.toLowerCase().includes('event') || 
                        table.name.toLowerCase().includes('schedule') || 
                        table.name.toLowerCase().includes('time')) {
                        
                        eventRelatedTables.push({
                            name: table.name,
                            recordCount: sampleData.length,
                            columns: columns,
                            sampleData: firstRecord
                        });
                    }
                }
                
                // ุนูุฏ ุงูุงูุชูุงุก ูู ูุญุต ุฌููุน ุงูุฌุฏุงูู
                if (completed === tables.length) {
                    console.log('='.repeat(80));
                    console.log('๐ ุงูุฌุฏุงูู ุงููุฑุชุจุทุฉ ุจุงูุฃุญุฏุงุซ/ุงูุฌุฏููุฉ');
                    console.log('='.repeat(80));
                    
                    eventRelatedTables.forEach((table, index) => {
                        console.log(`\n${index + 1}. ุฌุฏูู: ${table.name}`);
                        console.log(`   ๐ ุงูุฃุนูุฏุฉ: ${table.columns.join(', ')}`);
                        console.log(`   ๐ ุนููุฉ ูู ุงูุจูุงูุงุช:`);
                        Object.entries(table.sampleData).forEach(([key, value]) => {
                            let displayValue = value;
                            if (typeof value === 'string' && value.length > 50) {
                                displayValue = value.substring(0, 50) + '...';
                            }
                            console.log(`      ${key}: ${displayValue}`);
                        });
                    });
                    
                    // ุงูุขู ูุงุฑู ูุฐู ุงูุฌุฏุงูู ูุน ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
                    compareEventTables(eventRelatedTables);
                }
            });
        });
    });
}

function compareEventTables(eventTables) {
    console.log('\n' + '='.repeat(80));
    console.log('๐ ููุงุฑูุฉ ุฌุฏุงูู ุงูุฃุญุฏุงุซ ูุน ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ');
    console.log('='.repeat(80));
    
    let completedComparisons = 0;
    const comparisonResults = [];
    
    eventTables.forEach(tableInfo => {
        const tableName = tableInfo.name;
        
        // ุนุฏุฏ ุงูุณุฌูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ
        currentDb.get(`SELECT COUNT(*) as count FROM ${tableName}`, (err, currentResult) => {
            if (err) {
                console.error(`โ ุฎุทุฃ ูู ูุฑุงุกุฉ ${tableName}:`, err.message);
                completedComparisons++;
                return;
            }
            
            const currentCount = currentResult.count;
            
            // ุนุฏุฏ ุงูุณุฌูุงุช ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
            backupDb.get(`SELECT COUNT(*) as count FROM ${tableName}`, (err, backupResult) => {
                completedComparisons++;
                
                let backupCount = 0;
                if (!err && backupResult) {
                    backupCount = backupResult.count;
                }
                
                const difference = backupCount - currentCount;
                
                console.log(`\n๐ ุฌุฏูู ${tableName}:`);
                console.log(`   ๐ ุงูุญุงูู: ${currentCount} ุณุฌู`);
                console.log(`   ๐พ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${backupCount} ุณุฌู`);
                
                if (difference > 0) {
                    console.log(`   ๐จ ููููุฏ: ${difference} ุณุฌู`);
                    
                    // ูุญุต ุชูุตููู ููุจูุงูุงุช ุงูููููุฏุฉ
                    examineDetailedDifferences(tableName, currentCount, backupCount);
                } else if (difference < 0) {
                    console.log(`   โ ุฌุฏูุฏ: ${Math.abs(difference)} ุณุฌู`);
                } else {
                    console.log(`   โ ูุชุทุงุจู`);
                }
                
                comparisonResults.push({
                    table: tableName,
                    current: currentCount,
                    backup: backupCount,
                    difference: difference
                });
                
                // ุนูุฏ ุงูุงูุชูุงุก ูู ุฌููุน ุงูููุงุฑูุงุช
                if (completedComparisons === eventTables.length) {
                    generateFinalReport(comparisonResults);
                }
            });
        });
    });
}

function examineDetailedDifferences(tableName, currentCount, backupCount) {
    if (backupCount <= currentCount) return;
    
    console.log(`\n๐ ูุญุต ุชูุตููู ููุงุฎุชูุงูุงุช ูู ${tableName}:`);
    
    // ุฌูุจ ุนููุฉ ูู ุงูุจูุงูุงุช ุงูููููุฏุฉ
    backupDb.all(`SELECT * FROM ${tableName} ORDER BY rowid DESC LIMIT 5`, (err, backupSample) => {
        if (!err && backupSample && backupSample.length > 0) {
            console.log(`   ๐ ุนููุฉ ูู ุงูุจูุงูุงุช ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:`);
            backupSample.forEach((record, index) => {
                console.log(`      ${index + 1}. ID: ${record.id || 'ุบูุฑ ูุญุฏุฏ'}`);
                
                // ุนุฑุถ ุฃูู ุงููุนูููุงุช
                Object.entries(record).slice(0, 4).forEach(([key, value]) => {
                    if (key !== 'id') {
                        let displayValue = value;
                        if (typeof value === 'string' && value.length > 30) {
                            displayValue = value.substring(0, 30) + '...';
                        }
                        console.log(`         ${key}: ${displayValue}`);
                    }
                });
            });
        }
    });
}

function generateFinalReport(results) {
    console.log('\n' + '='.repeat(80));
    console.log('๐ ุงูุชูุฑูุฑ ุงูููุงุฆู - ุญุงูุฉ ุฌุฏุงูู ุงูุฃุญุฏุงุซ');
    console.log('='.repeat(80));
    
    const tablesWithIssues = results.filter(r => r.difference !== 0);
    const missingData = results.filter(r => r.difference > 0);
    const newData = results.filter(r => r.difference < 0);
    
    console.log(`\n๐ ุงูุฅุญุตุงุฆูุงุช ุงูุนุงูุฉ:`);
    console.log(`   ๐ ุฅุฌูุงูู ุงูุฌุฏุงูู ุงูููุญูุตุฉ: ${results.length}`);
    console.log(`   โ๏ธ ุฌุฏุงูู ูุชุทุงุจูุฉ: ${results.length - tablesWithIssues.length}`);
    console.log(`   โ ุฌุฏุงูู ุจูุง ูุดุงูู: ${tablesWithIssues.length}`);
    
    if (missingData.length > 0) {
        console.log(`\n๐จ ุฌุฏุงูู ุจูุง ุจูุงูุงุช ููููุฏุฉ:`);
        missingData.forEach(result => {
            console.log(`   โข ${result.table}: ${result.difference} ุณุฌู ููููุฏ`);
        });
    }
    
    if (newData.length > 0) {
        console.log(`\nโ ุฌุฏุงูู ุจูุง ุจูุงูุงุช ุฌุฏูุฏุฉ:`);
        newData.forEach(result => {
            console.log(`   โข ${result.table}: ${Math.abs(result.difference)} ุณุฌู ุฌุฏูุฏ`);
        });
    }
    
    // ุชูุตูุงุช
    console.log(`\n๐ก ุงูุชูุตูุงุช:`);
    if (missingData.length > 0) {
        console.log(`   1. ๐ง ุงุณุชุนุงุฏุฉ ุงูุจูุงูุงุช ุงูููููุฏุฉ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ`);
        console.log(`   2. ๐ ุชุญุฏูุฏ ุณุจุจ ููุฏุงู ุงูุจูุงูุงุช`);
        console.log(`   3. ๐ก๏ธ ุชุทุจูู ุขููุงุช ุญูุงูุฉ ููุฌุฏุงูู ุงููุชุฃุซุฑุฉ`);
    } else {
        console.log(`   1. โ ุฌููุน ุงูุจูุงูุงุช ุณูููุฉ`);
        console.log(`   2. ๐ ุชูุนูู ุงููุฑุงูุจุฉ ุงูุฏูุฑูุฉ ููููุงูุฉ`);
    }
    console.log(`   3. ๐พ ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ ูุญุฏุซุฉ`);
    
    // ุฅุบูุงู ุงูุงุชุตุงูุงุช
    currentDb.close();
    backupDb.close();
    
    console.log('\nโ ุชู ุงูุงูุชูุงุก ูู ุงูุชุญููู ุงูุดุงูู');
}

// ุจุฏุก ุงูุชุญููู
findAllEventTables();