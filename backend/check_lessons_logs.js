const sqlite3 = require('sqlite3').verbose();
const path = require('path');

async function checkLessonsAndLogs() {
    console.log('๐ ูุญุต ุณุฌูุงุช ุงูุฏุฑูุณ ูุงูุญุตุต ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...\n');

    const currentDbPath = path.join(__dirname, '..', 'classroom.db');
    const backupPath = path.join(__dirname, '..', 'classroom_before_restore_2025-09-26T14-53-53-289Z.db');

    try {
        // ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ
        console.log('๐ ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ:');
        const currentDb = new sqlite3.Database(currentDbPath);

        // ูุญุต ุฌุฏูู Lessons
        const currentLessons = await new Promise((resolve, reject) => {
            currentDb.get("SELECT COUNT(*) as count FROM Lessons", (err, row) => {
                if (err) {
                    console.log(`โ ุฌุฏูู Lessons ุบูุฑ ููุฌูุฏ: ${err.message}`);
                    resolve(0);
                    return;
                }
                resolve(row.count);
            });
        });

        console.log(`๐ ุนุฏุฏ ุงูุฏุฑูุณ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ: ${currentLessons}`);

        // ูุญุต ุฌุฏูู LessonLogs
        const currentLogs = await new Promise((resolve, reject) => {
            currentDb.get("SELECT COUNT(*) as count FROM LessonLogs", (err, row) => {
                if (err) {
                    console.log(`โ ุฌุฏูู LessonLogs ุบูุฑ ููุฌูุฏ: ${err.message}`);
                    resolve(0);
                    return;
                }
                resolve(row.count);
            });
        });

        console.log(`๐ ุนุฏุฏ ุณุฌูุงุช ุงูุญุตุต ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ: ${currentLogs}`);

        currentDb.close();

        // ูุญุต ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
        console.log('\n๐ ูุญุต ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:');
        const backupDb = new sqlite3.Database(backupPath);

        // ูุญุต ุฌุฏูู Lessons ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
        const backupLessons = await new Promise((resolve, reject) => {
            backupDb.get("SELECT COUNT(*) as count FROM Lessons", (err, row) => {
                if (err) {
                    console.log(`โ ุฌุฏูู Lessons ุบูุฑ ููุฌูุฏ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${err.message}`);
                    resolve(0);
                    return;
                }
                resolve(row.count);
            });
        });

        console.log(`๐ ุนุฏุฏ ุงูุฏุฑูุณ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${backupLessons}`);

        // ูุญุต ุฌุฏูู LessonLogs ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ
        const backupLogs = await new Promise((resolve, reject) => {
            backupDb.get("SELECT COUNT(*) as count FROM LessonLogs", (err, row) => {
                if (err) {
                    console.log(`โ ุฌุฏูู LessonLogs ุบูุฑ ููุฌูุฏ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${err.message}`);
                    resolve(0);
                    return;
                }
                resolve(row.count);
            });
        });

        console.log(`๐ ุนุฏุฏ ุณุฌูุงุช ุงูุญุตุต ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${backupLogs}`);

        // ุนุฑุถ ุนููุฉ ูู ุงูุฏุฑูุณ
        if (backupLessons > 0) {
            console.log('\n๐ ุนููุฉ ูู ุงูุฏุฑูุณ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:');
            const sampleLessons = await new Promise((resolve, reject) => {
                backupDb.all("SELECT * FROM Lessons LIMIT 5", (err, rows) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(rows);
                });
            });

            sampleLessons.forEach((lesson, index) => {
                console.log(`   ${index + 1}. ID: ${lesson.id} - ุงููุณู: ${lesson.sectionId} - ุงูุนููุงู: ${lesson.title}`);
            });
        }

        // ุนุฑุถ ุนููุฉ ูู ุณุฌูุงุช ุงูุญุตุต
        if (backupLogs > 0) {
            console.log('\n๐ ุนููุฉ ูู ุณุฌูุงุช ุงูุญุตุต ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ:');
            const sampleLogs = await new Promise((resolve, reject) => {
                backupDb.all("SELECT * FROM LessonLogs LIMIT 5", (err, rows) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(rows);
                });
            });

            sampleLogs.forEach((log, index) => {
                console.log(`   ${index + 1}. ID: ${log.id} - ุงููุณู: ${log.sectionId} - ุงูุชุงุฑูุฎ: ${log.date} - ุงูููุถูุน: ${log.topic}`);
            });
        }

        backupDb.close();

        console.log('\n๐ ููุฎุต ุงูููุงุฑูุฉ:');
        console.log(`๐ ุงูุฏุฑูุณ - ุงูุญุงูู: ${currentLessons} | ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${backupLessons}`);
        console.log(`๐ ุณุฌูุงุช ุงูุญุตุต - ุงูุญุงูู: ${currentLogs} | ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ: ${backupLogs}`);

        if (backupLessons > currentLessons || backupLogs > currentLogs) {
            console.log('\n๐ ูููุตุญ ุจุงูุงุณุชุนุงุฏุฉ ูู ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ');
        } else {
            console.log('\nโ ุงูุจูุงูุงุช ุงูุญุงููุฉ ูุญุฏุซุฉ');
        }

    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ูุญุต ุงูุจูุงูุงุช:', error);
    }
}

checkLessonsAndLogs();