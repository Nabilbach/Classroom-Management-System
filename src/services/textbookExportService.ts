/**
 * خدمة التصدير والطباعة لدفتر النصوص
 */

import { TextbookEntry } from '../types/textbookTypes';
import jsPDF from 'jspdf';
import * as XLSX from 'xlsx';

// إعداد الخط العربي لـ jsPDF
import 'jspdf-autotable';

class TextbookExportService {
  
  /**
   * تصدير سجلات دفتر النصوص إلى PDF
   */
  async exportToPDF(entries: TextbookEntry[], title: string = 'دفتر النصوص'): Promise<void> {
    try {
      const doc = new jsPDF({
        orientation: 'landscape',
        unit: 'mm',
        format: 'a4'
      });

      // إضافة دعم الخط العربي (يتطلب ملف خط)
      // doc.addFont('path/to/arabic-font.ttf', 'Arabic', 'normal');
      // doc.setFont('Arabic');

      // العنوان
      doc.setFontSize(18);
      doc.text(title, doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' });

      // معلومات إضافية
      doc.setFontSize(12);
  doc.text(`تاريخ التصدير: ${new Date().toISOString().slice(0,10)}`, 20, 35);
      doc.text(`عدد السجلات: ${entries.length}`, 20, 45);

      // إعداد الجدول
      const headers = [
        'التاريخ',
        'القسم', 
        'المادة',
        'عنوان الدرس',
        'المعلم',
        'نسبة الإنجاز',
        'الحالة'
      ];

      const data = entries.map(entry => [
        this.formatDate(entry.date),
        entry.sectionName,
        entry.subject,
        entry.lessonTitle,
        entry.teacher,
        `${entry.completionRate}%`,
        entry.isAutoGenerated ? 'تلقائي' : 'يدوي'
      ]);

      // إضافة الجدول
      (doc as any).autoTable({
        head: [headers],
        body: data,
        startY: 55,
        styles: {
          font: 'helvetica',
          fontSize: 10,
          cellPadding: 3,
          overflow: 'linebreak',
          halign: 'center'
        },
        headStyles: {
          fillColor: [41, 128, 185],
          textColor: 255,
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [245, 245, 245]
        },
        margin: { top: 60 }
      });

      // حفظ الملف
      const fileName = `textbook_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);

    } catch (error) {
      console.error('خطأ في تصدير PDF:', error);
      throw new Error('فشل في تصدير ملف PDF');
    }
  }

  /**
   * تصدير سجل واحد إلى PDF مع التفاصيل الكاملة
   */
  async exportSingleEntryToPDF(entry: TextbookEntry): Promise<void> {
    try {
      const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      let yPosition = 20;

      // العنوان
      doc.setFontSize(16);
      doc.text('سجل دفتر النصوص', doc.internal.pageSize.getWidth() / 2, yPosition, { align: 'center' });
      yPosition += 20;

      // المعلومات الأساسية
      doc.setFontSize(12);
      const basicInfo = [
        `التاريخ: ${this.formatDate(entry.date)}`,
        `القسم: ${entry.sectionName}`,
        `المادة: ${entry.subject}`,
        `المعلم: ${entry.teacher}`,
        `القاعة: ${entry.classroom}`,
        `رقم الجلسة: ${entry.sessionNumber}`,
        `نسبة الإنجاز: ${entry.completionRate}%`
      ];

      basicInfo.forEach(info => {
        doc.text(info, 20, yPosition);
        yPosition += 10;
      });

      yPosition += 10;

      // عنوان الدرس
      doc.setFontSize(14);
      doc.text('عنوان الدرس:', 20, yPosition);
      yPosition += 10;
      doc.setFontSize(12);
      doc.text(entry.lessonTitle, 20, yPosition);
      yPosition += 15;

      // محتوى الدرس
      doc.setFontSize(14);
      doc.text('محتوى الدرس:', 20, yPosition);
      yPosition += 10;
      doc.setFontSize(10);
      const content = doc.splitTextToSize(entry.lessonContent, 170);
      doc.text(content, 20, yPosition);
      yPosition += content.length * 5 + 10;

      // مراحل الدرس
      if (entry.completedStages && entry.completedStages.length > 0) {
        doc.setFontSize(14);
        doc.text('مراحل الدرس:', 20, yPosition);
        yPosition += 10;

        entry.completedStages.forEach((stage, index) => {
          doc.setFontSize(10);
          doc.text(`${index + 1}. ${stage.title}`, 25, yPosition);
          yPosition += 7;
          if (stage.description) {
            const desc = doc.splitTextToSize(`   ${stage.description}`, 165);
            doc.text(desc, 25, yPosition);
            yPosition += desc.length * 5;
          }
          yPosition += 3;
        });
        yPosition += 10;
      }

      // الواجبات والتقييمات
      if (entry.homework && entry.homework !== 'لا توجد واجبات') {
        doc.setFontSize(12);
        doc.text('الواجبات:', 20, yPosition);
        yPosition += 7;
        doc.setFontSize(10);
        const homework = doc.splitTextToSize(entry.homework, 170);
        doc.text(homework, 20, yPosition);
        yPosition += homework.length * 5 + 10;
      }

      if (entry.evaluations && entry.evaluations !== 'لا توجد تقييمات') {
        doc.setFontSize(12);
        doc.text('التقييمات:', 20, yPosition);
        yPosition += 7;
        doc.setFontSize(10);
        const evaluations = doc.splitTextToSize(entry.evaluations, 170);
        doc.text(evaluations, 20, yPosition);
        yPosition += evaluations.length * 5 + 10;
      }

      // الملاحظات
      if (entry.notes) {
        doc.setFontSize(12);
        doc.text('ملاحظات:', 20, yPosition);
        yPosition += 7;
        doc.setFontSize(10);
        const notes = doc.splitTextToSize(entry.notes, 170);
        doc.text(notes, 20, yPosition);
        yPosition += notes.length * 5 + 10;
      }

      // توقيع المعلم
      yPosition = doc.internal.pageSize.getHeight() - 40;
      doc.setFontSize(12);
      doc.text('توقيع المعلم: ____________________', 20, yPosition);
      doc.text('التاريخ: ____________________', 120, yPosition);

      // حفظ الملف
      const fileName = `textbook_entry_${entry.sectionName}_${entry.date}.pdf`;
      doc.save(fileName);

    } catch (error) {
      console.error('خطأ في تصدير سجل مفرد:', error);
      throw new Error('فشل في تصدير السجل');
    }
  }

  /**
   * تصدير سجلات دفتر النصوص إلى Excel
   */
  async exportToExcel(entries: TextbookEntry[], fileName?: string): Promise<void> {
    try {
      // إعداد البيانات الأساسية
      const basicData = entries.map(entry => ({
        'التاريخ': this.formatDate(entry.date),
        'القسم': entry.sectionName,
        'المادة': entry.subject,
        'عنوان الدرس': entry.lessonTitle,
        'محتوى الدرس': entry.lessonContent,
        'المعلم': entry.teacher,
        'القاعة': entry.classroom,
        'رقم الجلسة': entry.sessionNumber,
        'نسبة الإنجاز': `${entry.completionRate}%`,
        'الواجبات': entry.homework,
        'التقييمات': entry.evaluations,
        'ملاحظات': entry.notes,
        'الحالة': entry.isAutoGenerated ? 'تلقائي' : 'يدوي',
        'تم التعديل يدوياً': entry.isManuallyEdited ? 'نعم' : 'لا',
        'تاريخ الإنشاء': this.formatDate(entry.createdAt),
        'تاريخ التحديث': this.formatDate(entry.updatedAt)
      }));

      // إعداد ورقة العمل الأساسية
      const wb = XLSX.utils.book_new();
      const ws1 = XLSX.utils.json_to_sheet(basicData);
      
      // تنسيق ورقة العمل
      const range = XLSX.utils.decode_range(ws1['!ref'] || 'A1');
      ws1['!cols'] = [
        { wch: 12 }, // التاريخ
        { wch: 15 }, // القسم
        { wch: 20 }, // المادة
        { wch: 30 }, // عنوان الدرس
        { wch: 50 }, // محتوى الدرس
        { wch: 20 }, // المعلم
        { wch: 10 }, // القاعة
        { wch: 10 }, // رقم الجلسة
        { wch: 12 }, // نسبة الإنجاز
        { wch: 30 }, // الواجبات
        { wch: 30 }, // التقييمات
        { wch: 40 }, // ملاحظات
        { wch: 10 }, // الحالة
        { wch: 15 }, // تم التعديل يدوياً
        { wch: 15 }, // تاريخ الإنشاء
        { wch: 15 }  // تاريخ التحديث
      ];

      XLSX.utils.book_append_sheet(wb, ws1, 'سجلات دفتر النصوص');

      // إضافة ورقة عمل للمراحل التفصيلية
      const stagesData: any[] = [];
      entries.forEach(entry => {
        if (entry.completedStages && entry.completedStages.length > 0) {
          entry.completedStages.forEach(stage => {
            stagesData.push({
              'تاريخ الدرس': this.formatDate(entry.date),
              'القسم': entry.sectionName,
              'عنوان الدرس': entry.lessonTitle,
              'عنوان المرحلة': stage.title,
              'وصف المرحلة': stage.description,
              'نوع المرحلة': stage.type,
              'المدة (دقيقة)': stage.duration,
              'مرحلة أساسية': stage.isCore ? 'نعم' : 'لا',
              'ترتيب المرحلة': stage.order,
              'تاريخ الإكمال': this.formatDate(stage.completedAt)
            });
          });
        }
      });

      if (stagesData.length > 0) {
        const ws2 = XLSX.utils.json_to_sheet(stagesData);
        ws2['!cols'] = [
          { wch: 12 }, // تاريخ الدرس
          { wch: 15 }, // القسم
          { wch: 30 }, // عنوان الدرس
          { wch: 25 }, // عنوان المرحلة
          { wch: 40 }, // وصف المرحلة
          { wch: 12 }, // نوع المرحلة
          { wch: 10 }, // المدة
          { wch: 12 }, // مرحلة أساسية
          { wch: 10 }, // ترتيب المرحلة
          { wch: 15 }  // تاريخ الإكمال
        ];
        XLSX.utils.book_append_sheet(wb, ws2, 'مراحل الدروس التفصيلية');
      }

      // إضافة ورقة إحصائيات
      const statsData = this.generateStatisticsData(entries);
      const ws3 = XLSX.utils.json_to_sheet(statsData);
      XLSX.utils.book_append_sheet(wb, ws3, 'إحصائيات');

      // حفظ الملف
      const finalFileName = fileName || `textbook_export_${new Date().toISOString().split('T')[0]}.xlsx`;
      XLSX.writeFile(wb, finalFileName);

    } catch (error) {
      console.error('خطأ في تصدير Excel:', error);
      throw new Error('فشل في تصدير ملف Excel');
    }
  }

  /**
   * طباعة سجل واحد
   */
  async printSingleEntry(entry: TextbookEntry): Promise<void> {
    try {
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        throw new Error('تعذر فتح نافذة الطباعة');
      }

      const html = this.generatePrintHTML(entry);
      printWindow.document.write(html);
      printWindow.document.close();
      
      // انتظار تحميل المحتوى ثم الطباعة
      printWindow.onload = () => {
        printWindow.print();
        printWindow.close();
      };

    } catch (error) {
      console.error('خطأ في الطباعة:', error);
      throw new Error('فشل في طباعة السجل');
    }
  }

  /**
   * طباعة عدة سجلات في شكل قائمة
   */
  async printMultipleEntries(entries: TextbookEntry[]): Promise<void> {
    try {
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        throw new Error('تعذر فتح نافذة الطباعة');
      }

      const html = this.generateMultiplePrintHTML(entries);
      printWindow.document.write(html);
      printWindow.document.close();
      
      printWindow.onload = () => {
        printWindow.print();
        printWindow.close();
      };

    } catch (error) {
      console.error('خطأ في طباعة عدة سجلات:', error);
      throw new Error('فشل في طباعة السجلات');
    }
  }

  /**
   * توليد HTML للطباعة - سجل واحد
   */
  private generatePrintHTML(entry: TextbookEntry): string {
    return `
      <!DOCTYPE html>
      <html dir="rtl" lang="ar">
      <head>
        <meta charset="UTF-8">
        <title>سجل دفتر النصوص - ${entry.lessonTitle}</title>
        <style>
          body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            margin: 20px;
            color: #333;
          }
          .header {
            text-align: center;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
            margin-bottom: 30px;
          }
          .info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 20px;
          }
          .info-item {
            padding: 5px;
            border: 1px solid #ddd;
          }
          .section {
            margin-bottom: 20px;
            page-break-inside: avoid;
          }
          .section-title {
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 10px;
            border-bottom: 1px solid #ccc;
            padding-bottom: 5px;
          }
          .stages-list {
            list-style: decimal;
            padding-right: 20px;
          }
          .stage-item {
            margin-bottom: 10px;
          }
          .signature-area {
            margin-top: 50px;
            display: flex;
            justify-content: space-between;
          }
          @media print {
            body { margin: 0; }
            .no-print { display: none; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>سجل دفتر النصوص</h1>
          <h2>${entry.lessonTitle}</h2>
        </div>

        <div class="info-grid">
          <div class="info-item"><strong>التاريخ:</strong> ${this.formatDate(entry.date)}</div>
          <div class="info-item"><strong>القسم:</strong> ${entry.sectionName}</div>
          <div class="info-item"><strong>المادة:</strong> ${entry.subject}</div>
          <div class="info-item"><strong>المعلم:</strong> ${entry.teacher}</div>
          <div class="info-item"><strong>القاعة:</strong> ${entry.classroom}</div>
          <div class="info-item"><strong>رقم الجلسة:</strong> ${entry.sessionNumber}</div>
        </div>

        <div class="section">
          <div class="section-title">محتوى الدرس:</div>
          <p>${entry.lessonContent}</p>
        </div>

        ${entry.completedStages && entry.completedStages.length > 0 ? `
          <div class="section">
            <div class="section-title">مراحل الدرس:</div>
            <ol class="stages-list">
              ${entry.completedStages.map(stage => `
                <li class="stage-item">
                  <strong>${stage.title}</strong>
                  ${stage.description ? `<br><small>${stage.description}</small>` : ''}
                </li>
              `).join('')}
            </ol>
          </div>
        ` : ''}

        ${entry.homework && entry.homework !== 'لا توجد واجبات' ? `
          <div class="section">
            <div class="section-title">الواجبات:</div>
            <p>${entry.homework}</p>
          </div>
        ` : ''}

        ${entry.evaluations && entry.evaluations !== 'لا توجد تقييمات' ? `
          <div class="section">
            <div class="section-title">التقييمات:</div>
            <p>${entry.evaluations}</p>
          </div>
        ` : ''}

        ${entry.notes ? `
          <div class="section">
            <div class="section-title">ملاحظات:</div>
            <p>${entry.notes}</p>
          </div>
        ` : ''}

        <div class="signature-area">
          <div>توقيع المعلم: ____________________</div>
          <div>التاريخ: ____________________</div>
        </div>
      </body>
      </html>
    `;
  }

  /**
   * توليد HTML لطباعة عدة سجلات
   */
  private generateMultiplePrintHTML(entries: TextbookEntry[]): string {
    return `
      <!DOCTYPE html>
      <html dir="rtl" lang="ar">
      <head>
        <meta charset="UTF-8">
        <title>سجلات دفتر النصوص</title>
        <style>
          body {
            font-family: 'Arial', sans-serif;
            line-height: 1.4;
            margin: 20px;
            color: #333;
          }
          .header {
            text-align: center;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
            margin-bottom: 30px;
          }
          table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
          }
          th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: right;
            vertical-align: top;
          }
          th {
            background-color: #f5f5f5;
            font-weight: bold;
          }
          .status-auto { color: #1976d2; }
          .status-manual { color: #d32f2f; }
          @media print {
            body { margin: 0; }
            table { font-size: 12px; }
          }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>سجلات دفتر النصوص</h1>
          <p>تاريخ الطباعة: ${this.formatDate(new Date().toISOString())}</p>
          <p>عدد السجلات: ${entries.length}</p>
        </div>

        <table>
          <thead>
            <tr>
              <th>التاريخ</th>
              <th>القسم</th>
              <th>المادة</th>
              <th>عنوان الدرس</th>
              <th>المعلم</th>
              <th>نسبة الإنجاز</th>
              <th>الحالة</th>
            </tr>
          </thead>
          <tbody>
            ${entries.map(entry => `
              <tr>
                <td>${this.formatDate(entry.date)}</td>
                <td>${entry.sectionName}</td>
                <td>${entry.subject}</td>
                <td>${entry.lessonTitle}</td>
                <td>${entry.teacher}</td>
                <td>${entry.completionRate}%</td>
                <td class="${entry.isAutoGenerated ? 'status-auto' : 'status-manual'}">
                  ${entry.isAutoGenerated ? 'تلقائي' : 'يدوي'}
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </body>
      </html>
    `;
  }

  /**
   * توليد بيانات إحصائية للتصدير
   */
  private generateStatisticsData(entries: TextbookEntry[]): any[] {
    const stats = [
      { 'المؤشر': 'إجمالي السجلات', 'القيمة': entries.length },
      { 'المؤشر': 'السجلات المولدة تلقائياً', 'القيمة': entries.filter(e => e.isAutoGenerated).length },
      { 'المؤشر': 'السجلات اليدوية', 'القيمة': entries.filter(e => !e.isAutoGenerated).length },
      { 'المؤشر': 'السجلات المعدلة يدوياً', 'القيمة': entries.filter(e => e.isManuallyEdited).length },
      { 'المؤشر': 'متوسط نسبة الإنجاز', 'القيمة': `${Math.round(entries.reduce((sum, e) => sum + e.completionRate, 0) / entries.length)}%` }
    ];

    // إحصائيات حسب القسم
    const sectionStats = new Map<string, number>();
    entries.forEach(entry => {
      sectionStats.set(entry.sectionName, (sectionStats.get(entry.sectionName) || 0) + 1);
    });

    sectionStats.forEach((count, section) => {
      stats.push({ 'المؤشر': `سجلات قسم ${section}`, 'القيمة': count });
    });

    // إحصائيات حسب المعلم
    const teacherStats = new Map<string, number>();
    entries.forEach(entry => {
      teacherStats.set(entry.teacher, (teacherStats.get(entry.teacher) || 0) + 1);
    });

    teacherStats.forEach((count, teacher) => {
      stats.push({ 'المؤشر': `سجلات المعلم ${teacher}`, 'القيمة': count });
    });

    return stats;
  }

  /**
   * تنسيق التاريخ للعرض
   */
  private formatDate(dateString: string): string {
    try {
  return new Date(dateString).toISOString().slice(0,10);
    } catch {
      return dateString;
    }
  }
}

export const textbookExportService = new TextbookExportService();
export default textbookExportService;